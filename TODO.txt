TODO
------------------------------------------------------------------------------ Obstruction button
------------------------------------------------------------------------------ Only clear hall button in one (right) direction
------------------------------------------------------------------------------ UDP on same socket
------------------------------------------------------------------------------ Stop btn
------------------------------------------------------------------------------ Heartbeat i fsm
------------------------------------------------------------------------------ Assigner
-- Button Light Contract
------------------------------------------------------------------------------ Peers
------------------------------------------------------------------------------ Basic primary and backup communication
------------------------------------------------------------------------------ WorldViewStruct
------------------------------------------------------------------------------ Transmit worldView as heartbeat from primary
- Flush channels before primary takeover
- Checkout SendRequest function, clean up
- Make README files
- Specify directions on all channels
- Update Elevators when Peers die 
- Include lights matrix in worldView struct
- When elevator is in same floor as cab-call, the light does not turn off!
- Elevator clears hall calls in both directions at the same time...

 --- BUTTON LIGHT CONTRACT ---
 -- When and where to turn on?
 -- When where to turn off?
 Proposed solution: Primary handles hall lights 
 by checking the request matrixes in the worldView.Elevators.Requests

From FSM. Obstruction is an important edge case, because the elev is still online/alive,
but it cannot really serve any orders. Thus the orders should be reassigned after some time!
If order is at same floor, take order after opening door.
May introduce bugs. Be carefull! Maybe this should be done after the door closes!
i.e. at case <- DoorTimer.C
What if someone obstructs the door so it cannot close after the order is accepted by an elev
Intrduce a timer for that order. If not taken within 5 sec, redistribute.


    --  SPLIT BRAIN --
-- Reassign possibly lost orders
-- Primary takeover decision for slave groups
-- Worldview reunification of backups and primaries

- Fix primary takeover printing whole history of elev state updates
- Split Brain Problem
-- Include Time stamp on worldView
-- Include Primary ID in worldView
--- Primary Election algorithm


Thoughts about the Split Brain Problem:
- There can only be one primary at a time for each group of disconnected elevator(s)
- Primary takover must happen fast
Scenario:
-Primary is gone for a short period
-Multiple backups tries to takeover
-- backup with latest update takes over
--- backup with lowest ID takes over
- Previous Primary gets back online
-- Is noticed that a new primary has taken over
--- Revert to backup mode

Scenario 2:
- A backup becomes offline
-- Receives no heartbeats
--- It is the only one on its network
---- Starts its own primary and broadcasts its worldView
- Is connected back online
-- Receives messages from the primary of the other network
--- Two primaries on the network!! Which one gets to stay?

Questions for TAs:
- Do we need to make the code runnable on any system (is this even possible), or is it fine to use OS-specific commands?
- Is there an upper limit on number of threads being used? Does it matter if most threads are default in a blocking state?
- How would you solve the naming of global constants? LARGE_LETTERS or another format?
- Dot-importing the config file. Yes or No?

