026b7588
6
- Should have included a README.md with information about main approach and system overwview.
- It is unclear what the system approach is (e.g. Primary/Backup, P2P, circle) After scouring the entire codebase, I'm still not sure.
- Consider making a fsm.Run() function that runs the main loop in stead of running it directly in main.
- The network.go and node.go file in network module seems a bit clouded. It is difficult to extract the purpuse of both the Network func in network.go and the transmitter and receiver func in node.go. I think that these functions can be simplified using the already provided functions bcast.Transmit, bcast.Receive peers.Transmit and peers.Receive.
- The optimalHallRequest.go file in orderDistribution module consists of 20 function definitions and 18 var/type/const declarations/definitions... This is really messy, and it is difficult to extract the purpuse. Is this module for assigning orders locally, or is this a module meant for a master to distribute orders between mutiple elevators?
- function and varaiable names are not very informative. Examples are the functions performInitialMove, performSingleMove, and the variables n, s and e in fsm.go... Cleaning up the names will make it easier for both you and the reviewer to get a clear understandning of each components function.
- The timer module is okay, but it does not really add anything new other that what is already provided by the std lib "time" module in go. Thus, the module could be removed.
- At the moment, the request module seems to be unused in the system. Maybe this will be implemented later, but for now it seems a bit weird.
In general: The project still lacks major additions, but before you start with this, you should be clear on what approach you want, which modules you need, how they'd interact, and gather all types and constants in a single config file. Maybe some of the modules, functions and types can be simplified and reduced. We recommend making a README.md, where you write down your main approach, module interaction, process flow and possible improvements. Also reconsider the naming of your vars and funcs. This will make it easier for you to cope with the task and for "outsiders" reading and understanding your code.

999da0a5
8
- Obstruction code must be improved. Implementing this as an event makes sense.
- System observability is still quite mediocre. There is no established logging paradigm.
- Changing all local Worldview instances to wv would improve readability.
- There is a bit of cluttering with commented code etc, but this is not a final version. These wrinkles should be ironed out prior to final release.
- HallLights handling in primary could face race conditions. Should be handled either with mutexes or like the fleetMap with channel protection.

2043ec35
8
- The code is reasonably readable, although it could do with some renaming (report.Report hurts the eyes). It is clear what model you are trying to create and the overall quality seems good. Here are some bulletpoints of possible issues that have or could arise:
- MaxDuration being 2^63-1 will cause an integer overflow and will stop the program from compiling on architectures with less than 64bits. A MaxDuration of 1hr is a practical inf for this project.
- I'm not necessarily convinced deep copies need to be made for all elements of the Elevator struct. ElevatorCase, LatestFloor, ID, Dirn, Behaviour are all thread safe. Access to and from the non thread-safe elements can be done with channels. I'm not sure this would improve efficiency, but it seems like a slight oversight to not take full advantage of Go's features.
- All the DeepCopyX functions only perform shallow copies of the maps and slices. Copying by reference (ex: copy.Mapname = original.Mapname) only copies a pointer to the original instance. This invites race conditions, as a data structure which "should" be thread safe, isn't. You might not experience race conditions due to this, but you certainly could. We did. To perform a true deep copy of, lets say, the FullCabRequests matrix, you would need to initialize a new matrix and iterate through the original matrix and copy individual values.
- I dont understand why timer.UpdateTimer gets its own package all to itself while the gigantic for/select in main:64-150 doesnt (with some tweaking, it could become a function in fsm that is called as a goroutine from main). This is maybe more of a preference thing, but I think cleaning up the main and making it as concise as possible is a good move.
- To answer the question on main:29: Go automatically closes and cleans channels at program termination. Only when the program is running and you want to signal that no more data will be sent on the channel or to avoid unexpected blocking you would close the channel. Master termination is such an example, and broadcast channels are closed correctly in that instance. If I were to change anything, it would be to defer closure after creation instead of putting it in the kill-case. This way it is easy to check if the channels are explicitly told to close after function is finished or not.
- I would create a backup package that handles all of the backup-related tasks. This would also clean up the elevator.go file. Fault-tolerance-wise, it would be smart to divide the elevator struct from the backup as well. If the local elevator code breaks, there is no backup either.
-Having README's would improve the accessibility of your project. Having to scour the entire codebase to get an overview shouldn't be necessary.

18225af3
9
- Great README. Overall the codebase seems very reasonable. Layout is clean, no cluttering in main.
- The master module contains network handling, consider including this in the transport module instead. Also, the network hand out module has modular functions for transmitting and receiving, which could've been used. This is not a "dig", but resources might have been better spent elsewhere (e.g. multiple elevator order assignment).
- I would consider switching from mutexes to channel implementation for concurrent safe access. Mutexes work absolutely fine, but I think the channel implementation is elegant and makes use of Go's best features.
- state.GetAll and similar functions show that you understand the importance of thread-safety.
- The polling approach you have chosen is inefficient, as you are aware of. Implementing a fully event-driven polling system for functions like fsm.Run is smart.
- It looks like you currently open a new udp connection for every message sent. This could be improved greatly by reusing established connections.
- Channels should be buffered to improve robustness. (app:120-123) In the case of bugs and/or high traffic, goroutines could deadlock.
- Having type declarations at the top of files makes sense and would be more readable than the current approach.
