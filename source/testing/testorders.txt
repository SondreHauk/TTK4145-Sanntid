// package main

// import (
// 	"fmt"
// 	"time"
// 	"source/primary/sync"
// )

// type Order struct {
// 	Id     string
// 	Floor  int
// 	Button int
// }

// type OrderAccess struct {
// 	Cmd              string
// 	Id               string
// 	Orders           []Order
// 	UnacceptedOrders map[string][]Order
// 	ReadChan         chan map[string][]Order
// 	ReadAllChan      chan map[string][]Order
// }

// func UnacceptedOrdersManager(ordersActionChan <-chan OrderAccess) {
// 	orders := make(map[string][]Order) //The true map of unaccpeted orders
// 	for {
// 		select {
// 		case action := <-ordersActionChan:
// 			switch action.Cmd {
// 			case "read":
// 				deepCopy := make(map[string][]Order, len(orders))
// 				for key, value := range orders {
// 					deepCopy[key] = append([]Order{}, value...)
// 				}
// 				action.ReadChan <- deepCopy

// 			case "read all":
// 				action.ReadAllChan <- orders

// 			case "write":
// 				orders[action.Id] = append(orders[action.Id], action.Orders...)

// 			case "delete":
// 				if existingOrders, exists := orders[action.Id]; exists {
// 					newOrders := []Order{}
// 					for _, o := range existingOrders {
// 						// Keep only orders that don't match the given order
// 						if !(o.Floor == action.Orders[0].Floor && o.Button == action.Orders[0].Button) {
// 							newOrders = append(newOrders, o)
// 						}
// 					}
// 					// If no orders remain, delete the key from the map
// 					if len(newOrders) > 0 {
// 						orders[action.Id] = newOrders
// 					} else {
// 						delete(orders, action.Id)
// 					}
// 				}
// 			}
// 		}
// 	}
// }

// func AddUnacceptedOrder(ordersActionChan chan<- OrderAccess, order Order) {
// 	ordersActionChan <- OrderAccess{
// 		Cmd:    "write",
// 		Id:     order.Id,
// 		Orders: []Order{order}, // Send a single order as a slice
// 	}
// }

// /* func GetUnacceptedOrders(ordersActionChan chan<- OrderAccess, id string) []Order {
// 	readChan := make(chan map[string][]Order) // Create a temporary channel to receive the data

// 	ordersActionChan <- OrderAccess{
// 		Cmd:      "read",
// 		Id:       id,
// 		ReadChan: readChan,
// 	}
// 	result := <-readChan
// 	return result[id]
// } */

// func RemoveUnacceptedOrder(ordersActionChan chan<- OrderAccess, order Order) {
// 	ordersActionChan <- OrderAccess{
// 		Cmd:    "delete",
// 		Id:     order.Id,
// 		Orders: []Order{order},
// 	}
// }

// /* func GetUnacceptedOrders(orderActionChan chan<- OrderAccess) map[string][]Order {
// 	readAllChan := make(chan map[string][]Order)
// 	orderActionChan <- OrderAccess{Cmd: "read all", ReadAllChan: readAllChan}
// 	return <-readAllChan
// } */

// func main() {
// 	orderActionChan := make(chan OrderAccess)

// 	// Start the manager
// 	go UnacceptedOrdersManager(orderActionChan)

// 	time.Sleep(100 * time.Millisecond) // Give the goroutine time to start

// 	fmt.Println("=== Adding Orders ===")
// 	AddUnacceptedOrder(orderActionChan, Order{Id: "1", Floor: 2, Button: 1})
// 	// fmt.Println(sync.GetUnacceptedOrders(orderActionChan))
// 	AddUnacceptedOrder(orderActionChan, Order{Id: "1", Floor: 3, Button: 2})
// 	AddUnacceptedOrder(orderActionChan, Order{Id: "2", Floor: 1, Button: 0})
// 	time.Sleep(100 * time.Millisecond)

// 	fmt.Println("\n=== Reading All Orders ===")
// 	allOrders := sync.GetUnacceptedOrders(orderActionChan)
// 	fmt.Println("Current unaccepted orders:", allOrders)

// 	fmt.Println("\n=== Removing an Order ===")
// 	RemoveUnacceptedOrder(orderActionChan, Order{Id: "1", Floor: 2, Button: 1})
// 	time.Sleep(100 * time.Millisecond)

// 	fmt.Println("\n=== Reading All Orders After Deletion ===")
// 	allOrders = sync.GetUnacceptedOrders(orderActionChan)
// 	fmt.Println("Unaccepted orders after deletion:", allOrders)

// 	fmt.Println("\n=== Test Complete ===")
// }
